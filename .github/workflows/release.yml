name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 0.1.7)'
        required: true
        type: string

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
          
    - name: Validate project
      run: mvn clean validate -Dmaven.gpg.skip=true
      
    - name: Run full test suite
      run: mvn test -Dmaven.gpg.skip=true
      
    - name: Verify package can be built
      run: mvn package -DskipTests -Dmaven.gpg.skip=true

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: validate
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
          
    - name: Extract version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/v}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        
    - name: Update version in pom.xml
      run: |
        mvn versions:set -DnewVersion=${{ steps.version.outputs.version }} -DgenerateBackupPoms=false
        
    - name: Build release artifacts
      run: |
        mvn clean package -DskipTests -Dmaven.gpg.skip=true
        mvn source:jar -Dmaven.gpg.skip=true
        mvn javadoc:jar -Dmaven.gpg.skip=true
        
    - name: Create release notes
      id: release_notes
      run: |
        echo "## What's Changed" > release_notes.md
        echo "" >> release_notes.md
        
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          echo "### Commits since $LAST_TAG:" >> release_notes.md
          git log $LAST_TAG..HEAD --oneline --pretty=format:"- %s (%h)" >> release_notes.md
        else
          echo "### All commits in this release:" >> release_notes.md
          git log --oneline --pretty=format:"- %s (%h)" >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "## Artifacts" >> release_notes.md
        echo "- **JAR**: \`clojog-${{ steps.version.outputs.version }}.jar\`" >> release_notes.md
        echo "- **Sources**: \`clojog-${{ steps.version.outputs.version }}-sources.jar\`" >> release_notes.md
        echo "- **Javadoc**: \`clojog-${{ steps.version.outputs.version }}-javadoc.jar\`" >> release_notes.md
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: Release v${{ steps.version.outputs.version }}
        body_path: release_notes.md
        files: |
          target/clojog-${{ steps.version.outputs.version }}.jar
          target/clojog-${{ steps.version.outputs.version }}-sources.jar
          target/clojog-${{ steps.version.outputs.version }}-javadoc.jar
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-maven-central:
    name: Publish to Maven Central
    runs-on: ubuntu-latest
    needs: [ validate, release ]
    if: github.repository == 'clojang/clojog'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          server-id: central
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Update version in pom.xml
        run: |
          mvn versions:set -DnewVersion=${{ needs.release.outputs.version }} -DgenerateBackupPoms=false

      - name: Import and configure GPG key
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          # Create GPG directory
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg
          
          # Kill any existing gpg-agent
          gpgconf --kill gpg-agent || true
          
          # Configure GPG for GitHub Actions
          cat > ~/.gnupg/gpg.conf << EOF
          use-agent
          pinentry-mode loopback
          no-tty
          no-greeting
          batch
          trust-model always
          EOF
          
          cat > ~/.gnupg/gpg-agent.conf << EOF
          default-cache-ttl 7200
          max-cache-ttl 31536000
          allow-loopback-pinentry
          EOF
          
          chmod 600 ~/.gnupg/*
          
          # Import the GPG key
          echo "$GPG_PRIVATE_KEY" | base64 -d | gpg --batch --import 2>&1 || \
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import 2>&1
          
          # Get key details
          GPG_KEY_ID=$(gpg --list-secret-keys --with-colons | awk -F: '/^sec:/ { print $5 }' | tail -1)
          GPG_KEY_GRIP=$(gpg --list-secret-keys --with-colons | awk -F: '/^grp:/ { print $10 }' | tail -1)
          GPG_FINGERPRINT=$(gpg --list-secret-keys --with-colons | awk -F: '/^fpr:/ { print $10 }' | tail -1)
          
          echo "GPG_KEY_ID=$GPG_KEY_ID" >> $GITHUB_ENV
          echo "GPG_KEY_GRIP=$GPG_KEY_GRIP" >> $GITHUB_ENV
          echo "GPG_FINGERPRINT=$GPG_FINGERPRINT" >> $GITHUB_ENV
          
          # Trust the key
          echo "${GPG_FINGERPRINT}:6:" | gpg --import-ownertrust
          
          # Start gpg-agent
          gpgconf --launch gpg-agent
          
          # Set up passphrase preset
          if [ ! -z "$GPG_KEY_GRIP" ]; then
            /usr/lib/gnupg/gpg-preset-passphrase --preset "$GPG_KEY_GRIP" <<< "$GPG_PASSPHRASE"
          fi
          
          # Test the key works
          echo "Testing GPG signing..."
          echo "test" | gpg --batch --yes --passphrase "$GPG_PASSPHRASE" \
            --pinentry-mode loopback --armor --detach-sign \
            --default-key "$GPG_KEY_ID" 2>&1 || {
              echo "GPG test failed, trying with fingerprint..."
              echo "test" | gpg --batch --yes --passphrase "$GPG_PASSPHRASE" \
                --pinentry-mode loopback --armor --detach-sign \
                --default-key "$GPG_FINGERPRINT" 2>&1
            }
          
          # List final key status
          echo "Final GPG key status:"
          gpg --list-secret-keys --keyid-format LONG

      - name: Debug GPG setup (remove in production)
        run: |
          echo "Available secret keys:"
          gpg --list-secret-keys
          echo "GPG version:"
          gpg --version
          echo "Key ID: ${{ env.GPG_KEY_ID }}"
          echo "Fingerprint: ${{ env.KEY_FINGERPRINT }}"

      - name: Publish to Maven Central
        run: |
          # Ensure GPG can access TTY
          export GPG_TTY=$(tty) || export GPG_TTY=/dev/pts/0
          
          # Try with fingerprint if key ID fails
          mvn clean deploy -DskipTests -Pmaven-central,sign-artifacts \
            -Dgpg.keyname=${{ env.GPG_FINGERPRINT }} \
            -Dmaven.gpg.skip=false \
            -Dgpg.executable=gpg \
            -Dgpg.useagent=true || \
          mvn clean deploy -DskipTests -Pmaven-central,sign-artifacts \
            -Dgpg.keyname=${{ env.GPG_KEY_ID }} \
            -Dmaven.gpg.skip=false \
            -Dgpg.executable=gpg \
            -Dgpg.useagent=true
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

  publish-github-packages:
    name: Publish to GitHub Packages
    runs-on: ubuntu-latest
    needs: [ validate, release ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Update version in pom.xml
        run: |
          mvn versions:set -DnewVersion=${{ needs.release.outputs.version }} -DgenerateBackupPoms=false

      - name: Publish to GitHub Packages
        run: |
          mvn clean deploy -DskipTests -Pgithub-packages -Dmaven.gpg.skip=true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [ release ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Update version in README
        run: |
          sed -i 's/<version>[0-9]*\.[0-9]*\.[0-9]*<\/version>/<version>${{ needs.release.outputs.version }}<\/version>/g' README.md
          sed -i "s/clojog:[0-9]*\.[0-9]*\.[0-9]*/clojog:${{ needs.release.outputs.version }}/g" README.md

      - name: Generate Javadoc
        run: |
          mvn versions:set -DnewVersion=${{ needs.release.outputs.version }} -DgenerateBackupPoms=false
          mvn javadoc:javadoc -Dmaven.gpg.skip=true

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: target/site/apidocs
          destination_dir: javadoc

      - name: Commit version updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update documentation for release v${{ needs.release.outputs.version }}"
            git push origin main
          fi